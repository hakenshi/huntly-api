"""
Script para popular o banco de dados com leads de exemplo
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy.orm import Session
from src.database.connection import SessionLocal
from src.database.models import Lead, User
from src.cache.manager import CacheManager
from src.cache.config import get_redis_client
from src.search.indexer import LeadIndexer
from datetime import datetime, timedelta
import random

# Dados de exemplo realistas para empresas brasileiras
SAMPLE_LEADS = [
    {
        "company": "TechInova Solutions",
        "contact": "Carlos Silva",
        "email": "carlos@techinova.com.br",
        "phone": "(11) 99999-9999",
        "website": "https://techinova.com.br",
        "industry": "Tecnologia",
        "location": "S√£o Paulo, SP",
        "revenue": "R$ 2-5M",
        "employees": "50-100",
        "description": "Empresa de tecnologia especializada em solu√ß√µes SaaS para e-commerce. Desenvolve plataformas de gest√£o empresarial com foco em automa√ß√£o de processos.",
        "keywords": ["saas", "ecommerce", "automa√ß√£o", "gest√£o", "tecnologia"]
    },
    {
        "company": "EcoCommerce Brasil",
        "contact": "Ana Santos",
        "email": "ana@ecocommerce.com.br",
        "phone": "(21) 88888-8888",
        "website": "https://ecocommerce.com.br",
        "industry": "E-commerce",
        "location": "Rio de Janeiro, RJ",
        "revenue": "R$ 1-2M",
        "employees": "20-50",
        "description": "Plataforma de e-commerce sustent√°vel focada em produtos ecol√≥gicos. Conecta consumidores conscientes com marcas sustent√°veis.",
        "keywords": ["ecommerce", "sustentabilidade", "marketplace", "produtos ecol√≥gicos"]
    },
    {
        "company": "FinTech Inovadora",
        "contact": "Roberto Lima",
        "email": "roberto@fintechinova.com.br",
        "phone": "(11) 77777-7777",
        "website": "https://fintechinova.com.br",
        "industry": "Financeiro",
        "location": "S√£o Paulo, SP",
        "revenue": "R$ 5-10M",
        "employees": "100-200",
        "description": "Startup fintech que oferece solu√ß√µes de pagamento digital e cr√©dito para pequenas e m√©dias empresas. Foco em inclus√£o financeira.",
        "keywords": ["fintech", "pagamentos", "cr√©dito", "pme", "inclus√£o financeira"]
    },
    {
        "company": "HealthTech Medicina",
        "contact": "Dra. Maria Oliveira",
        "email": "maria@healthtech.com.br",
        "phone": "(11) 66666-6666",
        "website": "https://healthtech.com.br",
        "industry": "Sa√∫de",
        "location": "S√£o Paulo, SP",
        "revenue": "R$ 3-5M",
        "employees": "30-50",
        "description": "Plataforma de telemedicina e gest√£o hospitalar. Oferece consultas online e sistemas de prontu√°rio eletr√¥nico.",
        "keywords": ["telemedicina", "sa√∫de digital", "prontu√°rio eletr√¥nico", "consultas online"]
    },
    {
        "company": "EduTech Learning",
        "contact": "Prof. Jo√£o Costa",
        "email": "joao@edutech.com.br",
        "phone": "(11) 55555-5555",
        "website": "https://edutech.com.br",
        "industry": "Educa√ß√£o",
        "location": "S√£o Paulo, SP",
        "revenue": "R$ 1-3M",
        "employees": "15-30",
        "description": "Plataforma de ensino online com foco em cursos t√©cnicos e profissionalizantes. Utiliza IA para personaliza√ß√£o do aprendizado.",
        "keywords": ["educa√ß√£o", "ensino online", "cursos t√©cnicos", "intelig√™ncia artificial"]
    },
    {
        "company": "AgriTech Sustent√°vel",
        "contact": "Fernando Campos",
        "email": "fernando@agritech.com.br",
        "phone": "(16) 44444-4444",
        "website": "https://agritech.com.br",
        "industry": "Agroneg√≥cio",
        "location": "Ribeir√£o Preto, SP",
        "revenue": "R$ 10-20M",
        "employees": "200-500",
        "description": "Tecnologia para agricultura de precis√£o. Desenvolve sensores IoT e software para otimiza√ß√£o de cultivos e sustentabilidade.",
        "keywords": ["agritech", "agricultura de precis√£o", "iot", "sustentabilidade", "sensores"]
    },
    {
        "company": "LogisTech Transportes",
        "contact": "Ricardo Alves",
        "email": "ricardo@logistech.com.br",
        "phone": "(11) 33333-3333",
        "website": "https://logistech.com.br",
        "industry": "Log√≠stica",
        "location": "S√£o Paulo, SP",
        "revenue": "R$ 5-10M",
        "employees": "80-150",
        "description": "Plataforma de gest√£o log√≠stica com otimiza√ß√£o de rotas e rastreamento em tempo real. Atende e-commerces e transportadoras.",
        "keywords": ["log√≠stica", "otimiza√ß√£o de rotas", "rastreamento", "transportes", "ecommerce"]
    },
    {
        "company": "RetailTech Varejo",
        "contact": "Luciana Mendes",
        "email": "luciana@retailtech.com.br",
        "phone": "(21) 22222-2222",
        "website": "https://retailtech.com.br",
        "industry": "Varejo",
        "location": "Rio de Janeiro, RJ",
        "revenue": "R$ 2-5M",
        "employees": "40-80",
        "description": "Solu√ß√µes tecnol√≥gicas para varejo f√≠sico e digital. Oferece sistemas de PDV, gest√£o de estoque e an√°lise de dados de vendas.",
        "keywords": ["varejo", "pdv", "gest√£o de estoque", "an√°lise de dados", "omnichannel"]
    },
    {
        "company": "PropTech Im√≥veis",
        "contact": "Andr√© Souza",
        "email": "andre@proptech.com.br",
        "phone": "(11) 11111-1111",
        "website": "https://proptech.com.br",
        "industry": "Imobili√°rio",
        "location": "S√£o Paulo, SP",
        "revenue": "R$ 3-8M",
        "employees": "60-120",
        "description": "Plataforma digital para mercado imobili√°rio. Conecta compradores, vendedores e corretores com ferramentas de IA para avalia√ß√£o de im√≥veis.",
        "keywords": ["proptech", "im√≥veis", "intelig√™ncia artificial", "avalia√ß√£o", "marketplace"]
    },
    {
        "company": "CleanTech Energia",
        "contact": "Patr√≠cia Verde",
        "email": "patricia@cleantech.com.br",
        "phone": "(11) 99999-0000",
        "website": "https://cleantech.com.br",
        "industry": "Energia",
        "location": "S√£o Paulo, SP",
        "revenue": "R$ 15-30M",
        "employees": "300-500",
        "description": "Solu√ß√µes em energia renov√°vel e efici√™ncia energ√©tica. Desenvolve sistemas de energia solar e e√≥lica para empresas.",
        "keywords": ["energia renov√°vel", "energia solar", "energia e√≥lica", "efici√™ncia energ√©tica", "sustentabilidade"]
    }
]

def create_sample_user(db: Session) -> User:
    """Criar usu√°rio de exemplo se n√£o existir"""
    user = db.query(User).filter(User.email == "admin@huntly.com").first()
    
    if not user:
        user = User(
            email="admin@huntly.com",
            name="Admin Huntly",
            password_hash="hashed_password_here",  # Em produ√ß√£o, usar hash real
            plan_type="enterprise"
        )
        db.add(user)
        db.commit()
        db.refresh(user)
        print(f"‚úÖ Usu√°rio criado: {user.email}")
    
    return user

def populate_leads(db: Session, user_id: int, num_leads: int = None):
    """Popular banco com leads de exemplo"""
    
    if num_leads is None:
        num_leads = len(SAMPLE_LEADS)
    
    # Verificar se j√° existem leads
    existing_count = db.query(Lead).count()
    if existing_count > 0:
        print(f"‚ö†Ô∏è  J√° existem {existing_count} leads no banco. Continuando...")
    
    created_count = 0
    
    for i, lead_data in enumerate(SAMPLE_LEADS[:num_leads]):
        # Verificar se lead j√° existe
        existing_lead = db.query(Lead).filter(
            Lead.company == lead_data["company"]
        ).first()
        
        if existing_lead:
            print(f"‚è≠Ô∏è  Lead j√° existe: {lead_data['company']}")
            continue
        
        # Criar lead com varia√ß√µes nos dados
        created_days_ago = random.randint(1, 90)
        created_at = datetime.now() - timedelta(days=created_days_ago)
        
        lead = Lead(
            user_id=user_id,
            company=lead_data["company"],
            contact=lead_data["contact"],
            email=lead_data["email"],
            phone=lead_data["phone"],
            website=lead_data.get("website"),
            industry=lead_data["industry"],
            location=lead_data["location"],
            revenue=lead_data["revenue"],
            employees=lead_data["employees"],
            description=lead_data["description"],
            keywords=lead_data["keywords"],
            score=random.randint(60, 95),
            status=random.choice(["Novo", "Contatado", "Qualificado", "Proposta", "Negocia√ß√£o"]),
            priority=random.choice(["Alta", "M√©dia", "Baixa"]),
            created_at=created_at
        )
        
        db.add(lead)
        created_count += 1
        print(f"‚ûï Criando lead: {lead_data['company']}")
    
    try:
        db.commit()
        print(f"‚úÖ {created_count} leads criados com sucesso!")
        return created_count
    except Exception as e:
        db.rollback()
        print(f"‚ùå Erro ao criar leads: {e}")
        return 0

def index_leads(db: Session, created_count: int):
    """Indexar leads para busca"""
    if created_count == 0:
        print("‚è≠Ô∏è  Nenhum lead novo para indexar")
        return
    
    try:
        # Inicializar indexer
        redis_client = get_redis_client()
        cache_manager = CacheManager(redis_client)
        indexer = LeadIndexer(db, cache_manager)
        
        print("üîç Iniciando indexa√ß√£o dos leads...")
        
        # Indexar todos os leads
        stats = indexer.bulk_index_leads()
        
        print(f"‚úÖ Indexa√ß√£o conclu√≠da:")
        print(f"   - Total processado: {stats.total_leads}")
        print(f"   - Indexados com sucesso: {stats.indexed_leads}")
        print(f"   - Falhas: {stats.failed_leads}")
        print(f"   - Tempo: {stats.processing_time:.2f}s")
        
        if stats.errors:
            print(f"‚ö†Ô∏è  Erros encontrados:")
            for error in stats.errors[:5]:  # Mostrar apenas os primeiros 5
                print(f"   - {error}")
        
    except Exception as e:
        print(f"‚ùå Erro na indexa√ß√£o: {e}")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Iniciando popula√ß√£o do banco de dados com leads...")
    
    # Conectar ao banco
    db = SessionLocal()
    
    try:
        # Criar usu√°rio de exemplo
        user = create_sample_user(db)
        
        # Popular leads
        created_count = populate_leads(db, user.id)
        
        # Indexar leads para busca
        index_leads(db, created_count)
        
        # Mostrar estat√≠sticas finais
        total_leads = db.query(Lead).count()
        print(f"\nüìä Estat√≠sticas finais:")
        print(f"   - Total de leads no banco: {total_leads}")
        print(f"   - Leads criados nesta execu√ß√£o: {created_count}")
        
        print("\n‚úÖ Popula√ß√£o do banco conclu√≠da com sucesso!")
        print("\nüí° Agora voc√™ pode:")
        print("   - Usar GET /leads/ para listar leads")
        print("   - Usar GET /leads/search?q=tecnologia para buscar")
        print("   - Usar GET /leads/suggestions?q=tech para autocomplete")
        
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    main()